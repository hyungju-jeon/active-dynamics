import torch
from actdyn.config import *

# Create the configuration object
config = ExperimentConfig(
    seed=42,
    device="cpu",
    results_dir="results/vf_test",
    action_dim=2,
    observation_dim=50,
    latent_dim=2,
    environment=EnvironmentConfig(
        environment_type="vectorfield",
        env_dynamics_type="limit_cycle",
        env_dt=0.1,
        env_noise_scale=0.1,
        env_render_mode=None,
        env_action_bounds=[-0.5, 0.5],
        env_state_bounds=None,
        observation_type="loglinear",
        obs_hidden_dims=[16],
        obs_activation="relu",
        noise_type="gaussian",
        noise_scale=0.0,
        action_type="identity",
        act_action_bounds=[-0.5, 0.5],
        act_hidden_dims=[16],
        act_activation="relu",
    ),
    model=ModelConfig(
        encoder_type="rnn",
        enc_hidden_dims=[16],
        enc_hidden_dim=16,
        enc_rnn_type="gru",
        enc_num_layers=1,
        enc_activation="relu",
        mapping_type="loglinear",
        map_hidden_dims=[16],
        map_activation="relu",
        noise_type="gaussian",
        dynamics_type="mlp",
        is_ensemble=False,
        n_models=1,
        dyn_hidden_dims=[16],
        dyn_centers=None,
        action_type="identity",
        act_action_bounds=[-0.5, 0.5],
        act_hidden_dims=[16],
        act_activation="relu",
        model_type="seq-vae",
    ),
    policy=PolicyConfig(
        policy_type="mpc-icem",
        mpc_verbose=True,
        mpc_horizon=10,
        mpc_num_samples=32,
        mpc_num_iterations=10,
        mpc_num_elite=10,
        mpc_alpha=0.1,
        mpc_init_std=0.5,
        mpc_noise_beta=1.0,
        mpc_factor_decrease_num=1.25,
        mpc_frac_prev_elites=0.2,
        mpc_frac_elites_reused=0.3,
        mpc_use_mean_actions=True,
        mpc_shift_elites=True,
        mpc_keep_elites=True,
    ),
    metric=MetricConfig(
        metric_type="goal-distance",
        compute_type="sum",
        gamma=1.0,
        composite_weights=None,
        met_goal=torch.tensor([2.0, 2.0]),
        met_use_diag=True,
    ),
    training=TrainingConfig(
        total_steps=10000,
        train_every=1,
        save_every=1000,
        animate_every=1000,
        rollout_horizon=20,
        batch_size=1,
        learning_rate=0.001,
        weight_decay=0.00001,
    ),
    logging=LoggingConfig(
        log_every=100,
        save_every=1000,
        model_path="results/vf_test/models",
        buffer_path="results/vf_test/buffers",
        logger_path="results/vf_test/logs",
    ),
)
